//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLibrary
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FintellixPremierLeagueEntities : DbContext
    {
        public FintellixPremierLeagueEntities()
            : base("name=FintellixPremierLeagueEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Auction> Auctions { get; set; }
        public virtual DbSet<LoginTable> LoginTables { get; set; }
        public virtual DbSet<PlayerDetail> PlayerDetails { get; set; }
        public virtual DbSet<Squad> Squads { get; set; }
        public virtual DbSet<TeamDetail> TeamDetails { get; set; }
        public virtual DbSet<TeamMaster> TeamMasters { get; set; }
    
        public virtual int addPlayerToTeam(Nullable<int> teamID, Nullable<int> playerID, Nullable<long> year, Nullable<int> auctionedPrice)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var playerIDParameter = playerID.HasValue ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(long));
    
            var auctionedPriceParameter = auctionedPrice.HasValue ?
                new ObjectParameter("AuctionedPrice", auctionedPrice) :
                new ObjectParameter("AuctionedPrice", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addPlayerToTeam", teamIDParameter, playerIDParameter, yearParameter, auctionedPriceParameter);
        }
    
        public virtual ObjectResult<getAllTeamDetails_Result> getAllTeamDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllTeamDetails_Result>("getAllTeamDetails");
        }
    
        public virtual ObjectResult<getAuctionablePlayerById_Result> getAuctionablePlayerById(Nullable<int> auctionID)
        {
            var auctionIDParameter = auctionID.HasValue ?
                new ObjectParameter("AuctionID", auctionID) :
                new ObjectParameter("AuctionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAuctionablePlayerById_Result>("getAuctionablePlayerById", auctionIDParameter);
        }
    
        public virtual ObjectResult<getTeamDetailsByTeamID_Result> getTeamDetailsByTeamID(Nullable<int> teamID)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTeamDetailsByTeamID_Result>("getTeamDetailsByTeamID", teamIDParameter);
        }
    
        public virtual ObjectResult<getAllTeamList_Result> getAllTeamList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllTeamList_Result>("getAllTeamList");
        }
    
        public virtual int removePlayer(Nullable<int> teamID, Nullable<int> playerID, Nullable<long> year)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var playerIDParameter = playerID.HasValue ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("removePlayer", teamIDParameter, playerIDParameter, yearParameter);
        }
    
        public virtual ObjectResult<GetAllAuctionablePlayersDetails_Result> GetAllAuctionablePlayersDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAuctionablePlayersDetails_Result>("GetAllAuctionablePlayersDetails");
        }
    }
}
